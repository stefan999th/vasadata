import streamlit as st
import pandas as pd
import numpy as np
import re
import math
from matplotlib import colormaps
import plotly.express as px
import plotly.graph_objects as go
from utils import custom_widgets as cw

import warnings
warnings.filterwarnings("ignore")

def read_data(available_years):
    tmp = pd.DataFrame(columns=['placement', 'placement_gender', 'startnr', 'name', 'name_startnr', 'class', 'club', 'time', 'gender',
       'control', 'year', 'country', 'duration_s', 'duration_h', 'duration_m', 'startgroup',
       'd_duration_s', 'd_duration_m', 'height_m', 'distance_km', 'd_distance_km', 'd_ascent',
       'd_descent', 'avg_speed_kmh', 'avg_speed_minkm'])
    for year in available_years:
        tmp = pd.concat([tmp, pd.read_parquet("data/" + str(year) + "_full.parquet")], ignore_index=True)
    return tmp

# Page setting
st.set_page_config(layout="wide", page_title="VasaData - Vasaloppet Results")

plotly_config = {'displayModeBar': False, 'scrollZoom':False }

with open('style.css') as f:
    st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)


# Data load & data management
available_years = [2018, 2019, 2020, 2022, 2023, 2024, 2025]

df_full = read_data(available_years=available_years)

for col in ["placement", "placement_gender", "year", "duration_s", "duration_m", "duration_h", "d_duration_s", "d_duration_m","height_m",
            "distance_km", "d_distance_km", "d_ascent", "d_descent", "avg_speed_kmh", "avg_speed_minkm"]:
    df_full[col] = pd.to_numeric(df_full[col])


for col in ["class", "club", "gender", "country"]:
    df_full[col] = df_full[col].astype("category")

startgroups = ["Elit","1","2","3","4","5","6","7","8","9","10"]
df_full["startgroup"] = pd.Categorical(df_full["startgroup"], categories=startgroups, ordered=True)

sortorder = ["Start", "High Point", "Smågan", "Mångsbodarna", "Risberg", "Evertsberg", "Oxberg", "Hökberg", "Eldris", "Finish"]
df_full["control"] = pd.Categorical(df_full["control"], categories=sortorder, ordered=True)

for col in ["startnr", "name", "name_startnr"]:
    df_full[col] = df_full[col].astype("string")

### ---------------------- Start of Page -----------------------
# Calculations
# Layout
st.title("VasaData - Vasaloppet Results")
st.write("""Welcome to an interactive analysis app of the Vasaloppet results! \n
The data in this app is generated by the result lists from Vasaloppet but the app is not related to the Official Vasaloppet Organization in any way.

    Comments: 
        - Distance and speeds are caluclated from GPS track distance, not Vasaloppet official control distances.
        - Due to the app crashing when too many people accessing it I created my own copy of it. The original app url is located at https://vasadata.streamlit.app/. 
        - This app is not endorsed or sponsored by Vasaloppet, but was built as a hobby project!

""")

st.divider()

### ---------------------- General Information  -----------------------
# Pickers and Headers.
st.header("General Information: ")

year = st.selectbox("Pick Year", available_years, index=len(available_years)-1)
df = df_full[df_full.year==year].copy()

if year<2022:
    first_controlpoint = "Smågan"
else:
    first_controlpoint = "High Point"

# Calculations
start_participants = len(df.startnr.unique())
females = len(df[df.gender=="W"].startnr.unique())
males = len(df[df.gender=="M"].startnr.unique())
grp_row = df.loc[df.control==first_controlpoint, ["startnr", "startgroup"]].groupby("startgroup").count().reindex(startgroups)
df_finish = df[df.control=="Finish"]
df_finish["medal"] =  0
df_finish.loc[(df_finish.gender=="M") & (df_finish.duration_s<=(df_finish[df_finish.gender=="M"].duration_s.min()*1.5)), "medal"] = 1
df_finish.loc[(df_finish.gender=="W") & (df_finish.duration_s<=(df_finish[df_finish.gender=="W"].duration_s.min()*1.5)), "medal"] = 1
female_medalists = df_finish[df_finish.gender=="W"].medal.sum()
male_medalists = df_finish[df_finish.gender=="M"].medal.sum()
df_finish_medal = df_finish[["startgroup", "medal"]].groupby(by="startgroup").sum().reset_index()


### ---------------------- Individual Comparison  -----------------------
# Pickers and Headers.
st.header("Individual Results Analysis & Comparison:")

cols = st.columns(2)

df_avg_startgroup = df.loc[(df.avg_speed_kmh<40)&(df.control!="Start"),["control","startgroup", "avg_speed_kmh", "d_duration_m", "placement"]].groupby(by=["control","startgroup"]).mean().reset_index()

with cols[0]:
    selected_names = st.multiselect('Add names that you want to analyse and/or compare', df.name_startnr.unique())
with cols[1]:
    selected_groups = st.multiselect('Add Startgroup averages as comparisons', df.startgroup.unique().sort_values())


cols = st.columns(2)
with cols[0]:
    fig = px.line(df[(df.control != "Start") & (df.name_startnr.isin(selected_names))], x="control", y="avg_speed_kmh",
                      color="name", title='Average Speed per Section',
                      labels={"avg_speed_kmh": "km/h (avg)", 'control': 'Controlpoint'},
                        color_discrete_sequence=px.colors.qualitative.Set3)

    for i, group in enumerate(selected_groups):
        tmp = df_avg_startgroup[(df_avg_startgroup.startgroup==group) & (df_avg_startgroup.control!="Start")]
        fig.add_trace(go.Scatter(x=tmp.control, y=tmp.avg_speed_kmh, name=group,
                                 line=dict(width=2, dash='dot', color=px.colors.qualitative.Prism[i])))

    fig.update_layout(xaxis_type='category')
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)
    st.write("""Plot showing number of starting participants at each start-group of vasaloppet, and number of medalists per startgroup (yellow overlay)""")
with cols[1]:
    fig = px.bar(df[(df.control != "Start") & (df.name_startnr.isin(selected_names))], x="control", y="d_duration_m",
                  color="name", title='Average Duration per Section',barmode="group",
                  labels={"d_duration_m": "Duration Minutes", 'control': 'Controlpoint'}, range_y=[0,180],
                  color_discrete_sequence=px.colors.qualitative.Set3)

    for i, group in enumerate(selected_groups):
        tmp = df_avg_startgroup[(df_avg_startgroup.startgroup==group) & (df_avg_startgroup.control!="Start")]
        fig.add_trace(go.Scatter(x=tmp.control, y=tmp.d_duration_m, name=group,
                                 line=dict(width=2, dash='dot', color=px.colors.qualitative.Prism[i])))

    st.plotly_chart(fig, use_container_width=True, config=plotly_config)

# Add Placement Information
with cols[0]:
    fig = px.line(df[(df.control != "Start") & (df.name_startnr.isin(selected_names))], x="control", y="placement",
                      color="name", title='Total Placement per Control',
                      labels={"placement": "Placement", 'control': 'Controlpoint'},
                        color_discrete_sequence=px.colors.qualitative.Set3)

    for i, group in enumerate(selected_groups):
        tmp = df_avg_startgroup[(df_avg_startgroup.startgroup==group) & (df_avg_startgroup.control!="Start")]
        fig.add_trace(go.Scatter(x=tmp.control, y=tmp.placement, name=group,
                                 line=dict(width=2, dash='dot', color=px.colors.qualitative.Prism[i])))

    st.plotly_chart(fig, use_container_width=True, config=plotly_config)

with cols[1]:
    st.write("#### Table View of Selected Data")
    st.dataframe(df.loc[(df.control == "Finish") & (df.name_startnr.isin(selected_names)),["name_startnr","startgroup","club", "time", "placement", "placement_gender"]], hide_index=True)


st.divider()

### ---------------------- Year over Year Comparison  -----------------------
# Pickers and Headers.
st.header("Year over Year Comparison:")
df_start_year = df_full.drop_duplicates(subset=["year", "startnr"])[["year","gender","startnr"]].groupby(by=["year", "gender"]).count().reset_index()

df_breaks_year = df_full.drop_duplicates(subset=["year", "startnr"])[["year","startnr"]].groupby(by=["year"]).count()
df_breaks_year["finish"] = df_full[df_full.control=="Finish"].drop_duplicates(subset=["year", "startnr"])[["year", "startnr"]].groupby(by=["year"]).count()
df_breaks_year["break_offs"] = df_breaks_year.startnr - df_breaks_year.finish
df_breaks_year = df_breaks_year.reset_index()

cols = st.columns(2)
with cols[0]:
    fig = px.bar(df_start_year, x="year", y="startnr",
                 labels={'startnr': '# Participants', 'year': 'Year'},
                 title="# Participants per Year (starting)", color="gender",
                 color_discrete_sequence=px.colors.qualitative.Set3)
    fig.update_layout(xaxis_type='category')
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)
with cols[1]:
    fig = px.bar(df_breaks_year, x="year", y="break_offs",
                 labels={'break_offs': '# participants', 'year': 'Year'},
                 title="# Break-offs per Year",
                 color_discrete_sequence=px.colors.qualitative.Set3)
    fig.update_layout(xaxis_type='category')
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)


cols = st.columns(2)
with cols[0]:
    fig = px.violin(df_full[df_full.control == "Finish"].sort_values(by="year"), x="year", y="duration_h",
                    title="Finish Time Distribution per Year",
                    labels={'duration_h': 'Duration Hours', 'year': 'Year'},
                    color_discrete_sequence=px.colors.qualitative.Set3)
    fig.update_layout(xaxis_type='category')
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)

with cols[1]:
    fig = px.scatter(df_full[df_full.control=="Finish"], y="placement", x="duration_h", color="year",
                     title="Placement vs Finish Time per Year",
                     labels={'duration_h': 'Duration Hours', 'placement': 'Placement'},
                     color_continuous_scale=px.colors.sequential.YlGnBu)

    st.plotly_chart(fig, use_container_width=True, config=plotly_config)




st.divider()

