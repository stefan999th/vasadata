import streamlit as st
import pandas as pd
import numpy as np
import re
import math
from matplotlib import colormaps
import plotly.express as px
import plotly.graph_objects as go
from utils import custom_widgets as cw

import warnings
warnings.filterwarnings("ignore")

def read_data(available_years):
    tmp = pd.DataFrame(columns=['placement', 'placement_gender', 'startnr', 'name', 'name_startnr', 'class', 'club', 'time', 'gender',
       'control', 'year', 'country', 'duration_s', 'duration_h', 'duration_m', 'startgroup',
       'd_duration_s', 'd_duration_m', 'height_m', 'distance_km', 'd_distance_km', 'd_ascent',
       'd_descent', 'avg_speed_kmh', 'avg_speed_minkm'])
    for year in available_years:
        tmp = pd.concat([tmp, pd.read_parquet("data/" + str(year) + "_full.parquet")], ignore_index=True)
    return tmp

# Page setting
st.set_page_config(layout="wide", page_title="VasaData - Vasaloppet Results")

plotly_config = {'displayModeBar': False, 'scrollZoom':False }

with open('style.css') as f:
    st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)


# Data load & data management
available_years = [2018, 2019, 2020, 2022, 2023, 2024, 2025]

df_full = read_data(available_years=available_years)

for col in ["placement", "placement_gender", "year", "duration_s", "duration_m", "duration_h", "d_duration_s", "d_duration_m","height_m",
            "distance_km", "d_distance_km", "d_ascent", "d_descent", "avg_speed_kmh", "avg_speed_minkm"]:
    df_full[col] = pd.to_numeric(df_full[col])


for col in ["class", "club", "gender", "country"]:
    df_full[col] = df_full[col].astype("category")

startgroups = ["Elit","1","2","3","4","5","6","7","8","9","10"]
df_full["startgroup"] = pd.Categorical(df_full["startgroup"], categories=startgroups, ordered=True)

sortorder = ["Start", "High Point", "Smågan", "Mångsbodarna", "Risberg", "Evertsberg", "Oxberg", "Hökberg", "Eldris", "Finish"]
df_full["control"] = pd.Categorical(df_full["control"], categories=sortorder, ordered=True)

for col in ["startnr", "name", "name_startnr"]:
    df_full[col] = df_full[col].astype("string")

### ---------------------- Start of Page -----------------------
# Calculations
# Layout
st.title("VasaData - Vasaloppet Results")
st.write("""Welcome to an interactive analysis app of the Vasaloppet results! \n
The data in this app is generated by the result lists from Vasaloppet but the app is not related to the Official Vasaloppet Organization in any way.

    Comments: 
        - Distance and speeds are caluclated from GPS track distance, not Vasaloppet official control distances.
        - This app is not endorsed or sponsored by Vasaloppet, but was built as a hobby project. If you like it, please share it and give a like :)!
        - If you have an idea, want to give feedback or just say you enjoy the app, please write a comment at https://www.skidforum.se/topic/15964-webapp-f%C3%B6r-analys-av-vasaloppsresultat/!
        - Now also updated with 2025 data. Big thanks also to the great crowd at IK Stern for nice feedback and comments, you know who you are :D!  

""")

st.divider()

### ---------------------- General Information  -----------------------
# Pickers and Headers.
st.header("General Information: ")

year = st.selectbox("Pick Year", available_years, index=len(available_years)-1)
df = df_full[df_full.year==year].copy()

if year<2022:
    first_controlpoint = "Smågan"
else:
    first_controlpoint = "High Point"

# Calculations
start_participants = len(df.startnr.unique())
females = len(df[df.gender=="W"].startnr.unique())
males = len(df[df.gender=="M"].startnr.unique())
grp_row = df.loc[df.control==first_controlpoint, ["startnr", "startgroup"]].groupby("startgroup").count().reindex(startgroups)
df_finish = df[df.control=="Finish"]
df_finish["medal"] =  0
df_finish.loc[(df_finish.gender=="M") & (df_finish.duration_s<=(df_finish[df_finish.gender=="M"].duration_s.min()*1.5)), "medal"] = 1
df_finish.loc[(df_finish.gender=="W") & (df_finish.duration_s<=(df_finish[df_finish.gender=="W"].duration_s.min()*1.5)), "medal"] = 1
female_medalists = df_finish[df_finish.gender=="W"].medal.sum()
male_medalists = df_finish[df_finish.gender=="M"].medal.sum()
df_finish_medal = df_finish[["startgroup", "medal"]].groupby(by="startgroup").sum().reset_index()

# Data Contents Layout
cols = st.columns(5)
with cols[0]:
    cw.number_card(start_participants, "Total Participants")
with cols[1]:
    cw.number_card_tworow(males, str(round(100 * males / start_participants, 1)) + "%",
                          "Male Participants")
with cols[2]:
    cw.number_card_tworow(male_medalists, str(round(100 * male_medalists / males, 1)) + "%",
                          "Male Medalists (1.5x winning time)")
with cols[3]:
    cw.number_card_tworow(females, str(round(100 * females / start_participants, 1)) + "%",
                          "Female Participants")
with cols[4]:
    cw.number_card_tworow(female_medalists, str(round(100 * female_medalists / females, 1)) + "%",
                          "Female Medalists (1.5x winning time)")

cols = st.columns(2)
with cols[0]:
    fig = px.histogram(df_finish, x="duration_h", title="Total Finish time distribution",
                       labels={'duration_h': 'Duration Hours', 'count': '# Participants'},
                       color_discrete_sequence=px.colors.qualitative.Set3)

    fig.update_traces(xbins=dict(start=3.5, end=13.5, size=0.5))

    st.plotly_chart(fig, use_container_width=True, config=plotly_config)

    st.write("""Histogram showing the distibution of finish times of all participants in blocks of 30mins.
                      I.e. the bar at 6-6.5h shows the amount of participants finishing the race in 6-6.5 hours """)
with cols[1]:
    fig = px.scatter(df_finish, y="placement_gender", x="duration_h", color="gender",
                               title="Placement vs Finish Time",
                               labels={'duration_h': 'Duration Hours', 'placement_gender': 'Placement'},
                    color_discrete_sequence=px.colors.qualitative.Set3)
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)


    st.write("""Plot showing the relationship between finish time and position in the race for men and women.
                  Hover over the plots x-axis to see what a certain time would have given you as a placement (y-axis) """)

cols = st.columns(2)
with cols[0]:
    fig = px.bar(grp_row, x=grp_row.index, y="startnr",
                title="Participants and Medalists per Start Group",
                labels={'startnr': '# Participants', 'startgroup': 'Row'},barmode='overlay',
                color_discrete_sequence=px.colors.qualitative.Set3)

    fig.add_trace(
        go.Bar(name="Medalists", x=df_finish_medal.startgroup, y=df_finish_medal.medal, marker_color=px.colors.qualitative.Set3[1]))

    fig.update_layout(xaxis_type='category')
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)
    st.write("""Plot showing number of starting participants at each start-group of vasaloppet, and number of medalists per startgroup (yellow overlay)""")

with cols[1]:
    fig = px.violin(df_finish.sort_values(by="startgroup"), x="startgroup", y="duration_h",
                              title="Finish Time Distribution per Start Group",
                              labels={'duration_h': 'Duration Hours', 'startgroup': 'Row'},
                    color_discrete_sequence=px.colors.qualitative.Set3)

    fig.update_layout(xaxis_type='category')
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)
    st.write("""Violin-plot showing the finish time distributions per starting group. Where the "violin" is as thickest means that most participants from that start-group finished in that time. 
                Hover over the graph to see more metrics such as the mean time for the start group or the outer quantiles. """)

st.divider()
### ---------------------- Break Offs  -----------------------
# Pickers and Headers.
st.header("Break-Off Analysis:")

# Calculations
control_points = ["Start", "Smågan", "Mångsbodarna", "Risberg", "Evertsberg", "Oxberg", "Hökberg", "Eldris", "Finish"]


finish_participants = len(df[df.control=="Finish"].startnr.unique())
females_finishing = len(df[(df.control=="Finish")&(df.gender=="W")].startnr.unique())
males_finishing = len(df[(df.control=="Finish")&(df.gender=="M")].startnr.unique())

grp = df[(df["control"].isin(control_points))&(df.gender=="W")].groupby(by=["control"]).startnr.count().reindex(control_points)
grp["Start"] = len(df[df.gender=="W"].startnr.unique())
female_breaks = -(grp - grp.shift(1))
grp = df[(df["control"].isin(control_points))&(df.gender=="M")].groupby(by=["control"]).startnr.count().reindex(control_points)
grp["Start"] = len(df[df.gender=="M"].startnr.unique())
male_breaks = -(grp - grp.shift(1))

df_breaks = pd.DataFrame({"Total":female_breaks+male_breaks,
                          }).reset_index().melt("control")

df_breaks = df_breaks[df_breaks.control.isin(control_points[1:])]

df_breaks_share = pd.DataFrame({"W":100*female_breaks/female_breaks.sum(),
                          "M":100*male_breaks/male_breaks.sum(),
                          }).reset_index().melt("control")
df_breaks_share = df_breaks_share[df_breaks_share.control.isin(control_points[1:])]

row_start = df.groupby(by="startgroup").startnr.nunique()
row_finish = df[df.control=="Finish"].groupby(by="startgroup").startnr.nunique()
row_delta = row_start - row_finish

df_breaks_row = pd.DataFrame({"Starting":row_start,
                              "Break-Offs": row_start-row_finish,
                              "Break-Offs %": round(100*(row_start-row_finish)/row_start,2),
                              "Break-Offs % of Total": round(100*(row_start-row_finish)/(row_start-row_finish).sum(),2)}).reindex(startgroups).reset_index()

# Data Contents Layout
cols = st.columns(3)
with cols[0]:
    cw.number_card_tworow(start_participants-finish_participants,
                          str(round(100*(start_participants-finish_participants)/start_participants,2))+"%",
                          "Total Break-Offs")
with cols[1]:
    cw.number_card_tworow(females-females_finishing, str(round(100*(females-females_finishing)/females,2)) + "%",
                          "Female Break-Offs")
with cols[2]:
    cw.number_card_tworow(males - males_finishing,
                          str(round(100 * (males - males_finishing) / males, 2)) + "%",
                          "Male Break-Offs")
cols = st.columns(2)
with cols[0]:
    fig = px.bar(df_breaks, x="control", y="value",
                           labels={'value': '# Break-Offs', 'control': 'Controlpoint'},
                           title="# Break-Offs before Controlpoint",
                    color_discrete_sequence=px.colors.qualitative.Set3)
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)
    st.write("""Showing the amount of participants breaking before a certain control-point. 
    I.e. the value at Mångsbodarna shows how many participants that reached Smågan, but did not reach  (could have gotten stuck in the rope in Smågan, as the rope gets pulled after the timing-station)""")
with cols[1]:
    fig = px.bar(df_breaks_share, x="control", y="value", barmode="group", color="variable",
                           labels={'value': '% of Break-Offs', 'control': 'Controlpoint'},
                           title="Break Off Distribution per Gender",
                    color_discrete_sequence=px.colors.qualitative.Set3)
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)
    st.write("""Showing the distribution between the control points of the breaking participants and per gender. 
    I.e. you can see if a certain gender is more or less likely to break early vs late in the race for example.""")

cols = st.columns(2)
with cols[0]:
    fig = px.bar(df_breaks_row,
                 x="startgroup",
                 y="Break-Offs",
                 title="Total Number of Break-Offs per Startrow",
                 labels={'Break-Offs': '# of Break-Offs', 'startgroup': 'Row'},
                    color_discrete_sequence=px.colors.qualitative.Set3)
    fig.update_layout(xaxis_type='category')
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)
    st.write("""Showing the total number of break-offs per start-row""")
with cols[1]:
    fig = px.bar(df_breaks_row,
                 x="startgroup",
                 y="Break-Offs %",
                 title="Break-Offs Share per Startrow",
                 labels={"Break-Offs %": "% Share of Startgroup Participants", 'startgroup': 'Row'},
                    color_discrete_sequence=px.colors.qualitative.Set3)
    fig.update_layout(xaxis_type='category')
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)
    st.write("""Showing the break-offs as a share of number of participants in that start-row.
     I.e. if you start in row 10, how likely is it that you will break-off during the race.""")

st.divider()

### ---------------------- Section Analysis  -----------------------
# Pickers and Headers.
st.header("Section & Other Analyses:")

df_speed = df.loc[df.avg_speed_kmh<40,["control","startgroup", "avg_speed_kmh"]].groupby(by=["control","startgroup"]).mean().reset_index()
df_speed_gender = df.loc[df.avg_speed_kmh<40,["control","gender", "avg_speed_kmh"]].groupby(by=["control","gender"]).mean().reset_index()

cols = st.columns(2)
with cols[0]:
    fig = px.line(df_speed[df_speed.control != "Start"], x="control", y="avg_speed_kmh",
                  color="startgroup", title='Average Speed per Section and Startgroup',
                  labels={"avg_speed_kmh": "km/h (avg)", 'control': 'Controlpoint'},
                    color_discrete_sequence=px.colors.qualitative.Set3)
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)
    st.write("""Showing the average speed per section and start group. Note that it is the average speed on the section
    up to the control, so the linegraph at Smågan shows the average speed between High Point and Smågan.""")

with cols[1]:
    fig = px.violin(df[df.control==first_controlpoint].sort_values(by="startgroup"), x="startgroup", y="duration_m",
                                  title=f'Time to reach {first_controlpoint} per Start Row',
                                  labels={'duration_m': 'Duration Minutes', 'startgroup': 'Row'},
                    color_discrete_sequence=px.colors.qualitative.Set3)
    fig.update_layout(xaxis_type='category')
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)
    st.write(f'Violin-plot showing the time distribution to reach {first_controlpoint}, from different start-groups.')

cols = st.columns(2)
with cols[1]:
    places = pd.merge(df.loc[df.control=="Finish", ["name_startnr","startgroup", "placement", "placement_gender"]],
                      df.loc[df.control==first_controlpoint, ["name_startnr", "placement", "placement_gender"]],
                      how='left', on='name_startnr')
    places["delta_placements"] = (places.placement_y - places.placement_x)
    places["delta_placements_gender"] = (places.placement_gender_y - places.placement_gender_x)
    places = places.sort_values(by="delta_placements", ascending=False).reset_index()
    places = places[["name_startnr","startgroup", "placement_x", "delta_placements", "delta_placements_gender"]]
    places.columns = ["Name (startnr)","Startgroup", "Final Placement", "Places Gained/Lost", "Places Gained/Lost Gender"]
    st.write("#### Places Gained/Lost")
    st.write(places)
    st.write("""Utilize the headers to re-sort the graph to look at most places gained/lost. A positive number means position improvement
    If you hover over the table, a search icon will appear in the top right where you can search for specific individuals""")

with cols[0]:
    df_speed_gender = df.loc[df.avg_speed_kmh < 40, ["control", "gender", "avg_speed_kmh"]].groupby(by=["control", "gender"]).mean().reset_index()

    fig = px.line(df_speed_gender[(df_speed_gender.control != "Start")], x="control", y="avg_speed_kmh",
                  color="gender", title='Average Speed per Section and Gender',
                  labels={"avg_speed_kmh": "km/h (avg)", 'control': 'Controlpoint'},
                    color_discrete_sequence=px.colors.qualitative.Set3)
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)
    st.write("""Showing the average speed per section and start group. Note that it is the average speed on the section
    up to the control, so the linegraph at Smågan shows the average speed between High Point and Smågan.""")

st.divider()

### ---------------------- Individual Comparison  -----------------------
# Pickers and Headers.
st.header("Individual Results Analysis & Comparison:")

cols = st.columns(2)

df_avg_startgroup = df.loc[(df.avg_speed_kmh<40)&(df.control!="Start"),["control","startgroup", "avg_speed_kmh", "d_duration_m", "placement"]].groupby(by=["control","startgroup"]).mean().reset_index()

with cols[0]:
    selected_names = st.multiselect('Add names that you want to analyse and/or compare', df.name_startnr.unique())
with cols[1]:
    selected_groups = st.multiselect('Add Startgroup averages as comparisons', df.startgroup.unique().sort_values())


cols = st.columns(2)
with cols[0]:
    fig = px.line(df[(df.control != "Start") & (df.name_startnr.isin(selected_names))], x="control", y="avg_speed_kmh",
                      color="name", title='Average Speed per Section',
                      labels={"avg_speed_kmh": "km/h (avg)", 'control': 'Controlpoint'},
                        color_discrete_sequence=px.colors.qualitative.Set3)

    for i, group in enumerate(selected_groups):
        tmp = df_avg_startgroup[(df_avg_startgroup.startgroup==group) & (df_avg_startgroup.control!="Start")]
        fig.add_trace(go.Scatter(x=tmp.control, y=tmp.avg_speed_kmh, name=group,
                                 line=dict(width=2, dash='dot', color=px.colors.qualitative.Prism[i])))

    fig.update_layout(xaxis_type='category')
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)
    st.write("""Plot showing number of starting participants at each start-group of vasaloppet, and number of medalists per startgroup (yellow overlay)""")
with cols[1]:
    fig = px.bar(df[(df.control != "Start") & (df.name_startnr.isin(selected_names))], x="control", y="d_duration_m",
                  color="name", title='Average Duration per Section',barmode="group",
                  labels={"d_duration_m": "Duration Minutes", 'control': 'Controlpoint'}, range_y=[0,180],
                  color_discrete_sequence=px.colors.qualitative.Set3)

    for i, group in enumerate(selected_groups):
        tmp = df_avg_startgroup[(df_avg_startgroup.startgroup==group) & (df_avg_startgroup.control!="Start")]
        fig.add_trace(go.Scatter(x=tmp.control, y=tmp.d_duration_m, name=group,
                                 line=dict(width=2, dash='dot', color=px.colors.qualitative.Prism[i])))

    st.plotly_chart(fig, use_container_width=True, config=plotly_config)

# Add Placement Information
with cols[0]:
    fig = px.line(df[(df.control != "Start") & (df.name_startnr.isin(selected_names))], x="control", y="placement",
                      color="name", title='Total Placement per Control',
                      labels={"placement": "Placement", 'control': 'Controlpoint'},
                        color_discrete_sequence=px.colors.qualitative.Set3)

    for i, group in enumerate(selected_groups):
        tmp = df_avg_startgroup[(df_avg_startgroup.startgroup==group) & (df_avg_startgroup.control!="Start")]
        fig.add_trace(go.Scatter(x=tmp.control, y=tmp.placement, name=group,
                                 line=dict(width=2, dash='dot', color=px.colors.qualitative.Prism[i])))

    st.plotly_chart(fig, use_container_width=True, config=plotly_config)

with cols[1]:
    st.write("#### Table View of Selected Data")
    st.dataframe(df.loc[(df.control == "Finish") & (df.name_startnr.isin(selected_names)),["name_startnr","startgroup","club", "time", "placement", "placement_gender"]], hide_index=True)


st.divider()

### ---------------------- Year over Year Comparison  -----------------------
# Pickers and Headers.
st.header("Year over Year Comparison:")
df_start_year = df_full.drop_duplicates(subset=["year", "startnr"])[["year","gender","startnr"]].groupby(by=["year", "gender"]).count().reset_index()

df_breaks_year = df_full.drop_duplicates(subset=["year", "startnr"])[["year","startnr"]].groupby(by=["year"]).count()
df_breaks_year["finish"] = df_full[df_full.control=="Finish"].drop_duplicates(subset=["year", "startnr"])[["year", "startnr"]].groupby(by=["year"]).count()
df_breaks_year["break_offs"] = df_breaks_year.startnr - df_breaks_year.finish
df_breaks_year = df_breaks_year.reset_index()

cols = st.columns(2)
with cols[0]:
    fig = px.bar(df_start_year, x="year", y="startnr",
                 labels={'startnr': '# Participants', 'year': 'Year'},
                 title="# Participants per Year (starting)", color="gender",
                 color_discrete_sequence=px.colors.qualitative.Set3)
    fig.update_layout(xaxis_type='category')
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)
with cols[1]:
    fig = px.bar(df_breaks_year, x="year", y="break_offs",
                 labels={'break_offs': '# participants', 'year': 'Year'},
                 title="# Break-offs per Year",
                 color_discrete_sequence=px.colors.qualitative.Set3)
    fig.update_layout(xaxis_type='category')
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)


cols = st.columns(2)
with cols[0]:
    fig = px.violin(df_full[df_full.control == "Finish"].sort_values(by="year"), x="year", y="duration_h",
                    title="Finish Time Distribution per Year",
                    labels={'duration_h': 'Duration Hours', 'year': 'Year'},
                    color_discrete_sequence=px.colors.qualitative.Set3)
    fig.update_layout(xaxis_type='category')
    st.plotly_chart(fig, use_container_width=True, config=plotly_config)

with cols[1]:
    fig = px.scatter(df_full[df_full.control=="Finish"], y="placement", x="duration_h", color="year",
                     title="Placement vs Finish Time per Year",
                     labels={'duration_h': 'Duration Hours', 'placement': 'Placement'},
                     color_continuous_scale=px.colors.sequential.YlGnBu)

    st.plotly_chart(fig, use_container_width=True, config=plotly_config)




st.divider()

